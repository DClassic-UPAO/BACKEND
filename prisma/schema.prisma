// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLEADO
}

enum EstadoMesa {
  DISPONIBLE
  OCUPADA
  RESERVADA
}

enum MetodoPago {
  EFECTIVO
  TARJETA
  YAPE
}

enum TipoComprobante {
  BOLETA
  FACTURA
}

enum PresentacionTaper {
  CHICO
  MEDIANO
  GRANDE
}

enum TipoBebidaList {
  CERVEZAS
  REFRESCOS
  AGUA
  GASEOSAS
}

enum PresentacionBebida {
  PILSEN
  CUSQUEÃ‘A
  HEINEKEN
  VASO
  MEDIA_JARRA
  JARRA
  PERSONAL
  MEDIO_LITRO
  GORDITA
  LITRO
  LITRO_Y_MEDIO
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  name         String
  password     String
  role         Role    @default(EMPLEADO)
  refreshToken String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime @default(now())
}

model Cliente {
  id       Int      @id @default(autoincrement())
  nome     String
  dni      String
  telefono String
  email    String
  Pedido   Pedido[]
}

model Mesa {
  id        Int        @id @default(autoincrement())
  numero    String
  capacidad Int
  estado    EstadoMesa @default(DISPONIBLE)
  Pedido    Pedido[]
}

model Carta {
  id          Int     @id @default(autoincrement())
  nombre      String
  descripcion String
  precio      String
  Plato       Plato[]
}

model Plato {
  id          Int    @id @default(autoincrement())
  nombre      String
  descripcion String
  precio      Float

  Carta      Carta        @relation(fields: [cartaId], references: [id])
  cartaId    Int
  PedidoItem PedidoItem[]
}

model TipoPago {
  id          Int           @id @default(autoincrement())
  nombre      MetodoPago    @default(EFECTIVO)
  Comprobante Comprobante[]
}

model Comprobante {
  id              Int             @id @default(autoincrement())
  tipoComprobante TipoComprobante @default(BOLETA)
  numero          Int
  fechaEmision    DateTime        @default(now())

  TipoPago   TipoPago @relation(fields: [tipoPagoId], references: [id])
  tipoPagoId Int

  Pedido Pedido[]
}

model Pedido {
  id    Int      @id @default(autoincrement())
  fecha DateTime
  total Float

  Cliente   Cliente? @relation(fields: [clienteId], references: [id])
  clienteId Int

  Mesa   Mesa @relation(fields: [mesaId], references: [id])
  mesaId Int

  Comprobante   Comprobante @relation(fields: [comprobanteId], references: [id])
  comprobanteId Int

  DetalleAdicional   DetalleAdicional? @relation(fields: [detalleAdicionalId], references: [id])
  detalleAdicionalId Int?

  PedidoItem PedidoItem[]
}

model PedidoItem {
  id       Int @id @default(autoincrement())
  cantidad Int

  Pedido   Pedido @relation(fields: [pedidoId], references: [id])
  pedidoId Int

  Plato   Plato @relation(fields: [platoId], references: [id])
  platoId Int
}

model DetalleAdicional {
  id                      Int                       @id @default(autoincrement())
  Pedido                  Pedido[]
  DetalleAdicionalBebida  DetalleAdicionalBebida[]
  DetalleAdicionalTaper   DetalleAdicionalTaper[]
  DetalleAdicionalEntrada DetalleAdicionalEntrada[]
}

model DetalleAdicionalBebida {
  id Int @id @default(autoincrement())

  Bebida   Bebida @relation(fields: [bebidaId], references: [id])
  bebidaId Int

  DetalleAdicional   DetalleAdicional @relation(fields: [detalleAdicionalId], references: [id])
  detalleAdicionalId Int
}

model Bebida {
  id           Int                @id @default(autoincrement())
  presentacion PresentacionBebida @default(VASO)
  precio       Float

  TipoBebida   TipoBebida @relation(fields: [tipoBebidaId], references: [id])
  tipoBebidaId Int

  DetalleAdicionalBebida DetalleAdicionalBebida[]

  @@unique([presentacion, tipoBebidaId])
}

model TipoBebida {
  id     Int            @id @default(autoincrement())
  nombre TipoBebidaList @unique

  Bebida Bebida[]
}

model DetalleAdicionalTaper {
  id Int @id @default(autoincrement())

  Taper   Taper @relation(fields: [taperId], references: [id])
  taperId Int

  DetalleAdicional   DetalleAdicional @relation(fields: [detalleAdicionalId], references: [id])
  detalleAdicionalId Int
}

model Taper {
  id           Int               @id @default(autoincrement())
  presentacion PresentacionTaper @default(CHICO)
  precio       Float

  DetalleAdicionalTaper DetalleAdicionalTaper[]
}

model DetalleAdicionalEntrada {
  id Int @id @default(autoincrement())

  Entrada   Entrada @relation(fields: [entradaId], references: [id])
  entradaId Int

  DetalleAdicional   DetalleAdicional @relation(fields: [detalleAdicionalId], references: [id])
  detalleAdicionalId Int
}

model Entrada {
  id     Int   @id @default(autoincrement())
  precio Float

  DetalleAdicionalEntrada DetalleAdicionalEntrada[]
}
